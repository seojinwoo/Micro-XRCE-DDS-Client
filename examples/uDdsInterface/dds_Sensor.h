// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dds_Sensor.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _dds_Sensor_H_
#define _dds_Sensor_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
#include "dds_TimeStamp.h"
#include "dds_ErrorCode.h"

typedef enum SensorType
{
    SENSOR_BUTTON_WAKEUP,
    SENSOR_BUTTON_REG_MODE,
    SENSOR_BUTTON_FACTORY_MODE,
    SENSOR_IR_WAKEUP,
    SENSOR_FIRE
} SensorType;

typedef uint32_t SensorType_cdr;
typedef enum SendorCommandType
{
    SENSOR_IR_USED,
    SENSOR_IR_NOT_USED
} SendorCommandType;

typedef uint32_t SendorCommandType_cdr;
/*!
 * @brief This struct represents the structure SensorEvent defined by the user in the IDL file.
 * @ingroup dds_Sensor
 */
typedef struct SensorEvent
{
    TimeStamp stamp;
    SensorType_cdr type;
    uint16_t timeout_sec;
} SensorEvent;

struct ucdrBuffer;

bool SensorEvent_serialize_topic(struct ucdrBuffer* writer, const SensorEvent* topic);
bool SensorEvent_deserialize_topic(struct ucdrBuffer* reader, SensorEvent* topic);
uint32_t SensorEvent_size_of_topic(const SensorEvent* topic, uint32_t size);

/*!
 * @brief This struct represents the structure SensorRequest defined by the user in the IDL file.
 * @ingroup dds_Sensor
 */
typedef struct SensorRequest
{
    SendorCommandType_cdr command;} SensorRequest;

struct ucdrBuffer;

bool SensorRequest_serialize_topic(struct ucdrBuffer* writer, const SensorRequest* topic);
bool SensorRequest_deserialize_topic(struct ucdrBuffer* reader, SensorRequest* topic);
uint32_t SensorRequest_size_of_topic(const SensorRequest* topic, uint32_t size);

/*!
 * @brief This struct represents the structure SensorResponse defined by the user in the IDL file.
 * @ingroup dds_Sensor
 */
typedef struct SensorResponse
{
    SendorCommandType_cdr command;
    ErrorCode_cdr code;
} SensorResponse;

struct ucdrBuffer;

bool SensorResponse_serialize_topic(struct ucdrBuffer* writer, const SensorResponse* topic);
bool SensorResponse_deserialize_topic(struct ucdrBuffer* reader, SensorResponse* topic);
uint32_t SensorResponse_size_of_topic(const SensorResponse* topic, uint32_t size);


#ifdef __cplusplus
}
#endif

#endif // _dds_Sensor_H_