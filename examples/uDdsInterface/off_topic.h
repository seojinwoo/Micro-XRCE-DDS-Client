
// This code is generated by uDDS CodeGen, for off_topic.h

void to_topic(std::string ToServer, uint8_t TopicID, zigbangUXR &uxrPubOnly)
{
    Json::Value root;
    Json::Reader reader;
    bool parsingSuccessful = reader.parse(ToServer, root);
    if (!parsingSuccessful)
    {
        std::cout << "Failed to parse" << reader.getFormattedErrorMessages();
    }
    else
    {
        // Get Topic Name
        std::string topicName = root.begin().key().asString();
        std::cout << "Topic Name : " << topicName << std::endl;

        if (root.isMember("AIFaceRecognitionEvent"))
        {
            AIFaceRecognitionEvent topic;

            topic.stamp.sec = root["AIFaceRecognitionEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["AIFaceRecognitionEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.event = (AIFaceRecognitionEventType_cdr)root["AIFaceRecognitionEvent"]["value"]["event"]["value"].asUInt();

            std::string user_id = root["AIFaceRecognitionEvent"]["value"]["user_id"]["value"].asString();
            memset(topic.user_id, 0, sizeof(topic.user_id));
            memcpy(topic.user_id, user_id.c_str(), user_id.size());

            topic.confidence = root["AIFaceRecognitionEvent"]["value"]["confidence"]["value"].asFloat();

            topic.spoofing_rate = root["AIFaceRecognitionEvent"]["value"]["spoofing_rate"]["value"].asFloat();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AIFaceRecognitionRequest"))
        {
            AIFaceRecognitionRequest topic;

            topic.command = (AIFaceRecognitionCommand_cdr)root["AIFaceRecognitionRequest"]["value"]["command"]["value"].asUInt();

            std::string user_id = root["AIFaceRecognitionRequest"]["value"]["user_id"]["value"].asString();
            memset(topic.user_id, 0, sizeof(topic.user_id));
            memcpy(topic.user_id, user_id.c_str(), user_id.size());

            topic.timeout_sec = root["AIFaceRecognitionRequest"]["value"]["timeout_sec"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AIFaceRecognitionResponse"))
        {
            AIFaceRecognitionResponse topic;

            topic.command = (AIFaceRecognitionCommand_cdr)root["AIFaceRecognitionResponse"]["value"]["command"]["value"].asUInt();

            topic.user_count = root["AIFaceRecognitionResponse"]["value"]["user_count"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["AIFaceRecognitionResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AIQREvent"))
        {
            AIQREvent topic;

            topic.stamp.sec = root["AIQREvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["AIQREvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.event = (AIQREventType_cdr)root["AIQREvent"]["value"]["event"]["value"].asUInt();

            std::string read_string = root["AIQREvent"]["value"]["read_string"]["value"].asString();
            memset(topic.read_string, 0, sizeof(topic.read_string));
            memcpy(topic.read_string, read_string.c_str(), read_string.size());

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AIQRRequest"))
        {
            AIQRRequest topic;

            topic.command = (AIQRCommandType_cdr)root["AIQRRequest"]["value"]["command"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AIQRResponse"))
        {
            AIQRResponse topic;

            topic.command = (AIQRCommandType_cdr)root["AIQRResponse"]["value"]["command"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["AIQRResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AISpeakerEvent"))
        {
            AISpeakerEvent topic;

            topic.stamp.sec = root["AISpeakerEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["AISpeakerEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.event = (AISpeakerEventType_cdr)root["AISpeakerEvent"]["value"]["event"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AISpeakerRequest"))
        {
            AISpeakerRequest topic;

            topic.command = (AISpeakerComandType_cdr)root["AISpeakerRequest"]["value"]["command"]["value"].asUInt();

            topic.voice_type = root["AISpeakerRequest"]["value"]["voice_type"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AISpeakerResponse"))
        {
            AISpeakerResponse topic;

            topic.command = (AISpeakerComandType_cdr)root["AISpeakerResponse"]["value"]["command"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["AISpeakerResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AISystemEvent"))
        {
            AISystemEvent topic;

            topic.stamp.sec = root["AISystemEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["AISystemEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.event = (AISystemEventType_cdr)root["AISystemEvent"]["value"]["event"]["value"].asUInt();

            topic.wifi_connection_status = root["AISystemEvent"]["value"]["wifi_connection_status"]["value"].asUInt();

            topic.ble_connection_status = root["AISystemEvent"]["value"]["ble_connection_status"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AISystemRequest"))
        {
            AISystemRequest topic;

            topic.command = (AISystemCommandType_cdr)root["AISystemRequest"]["value"]["command"]["value"].asUInt();

            topic.wifi_mode = root["AISystemRequest"]["value"]["wifi_mode"]["value"].asUInt();

            topic.ble_mode = root["AISystemRequest"]["value"]["ble_mode"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AISystemResponse"))
        {
            AISystemResponse topic;

            topic.command = (AISystemCommandType_cdr)root["AISystemResponse"]["value"]["command"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["AISystemResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AIWebRTCEvent"))
        {
            AIWebRTCEvent topic;

            topic.stamp.sec = root["AIWebRTCEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["AIWebRTCEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.event = (AIWebRTCEventType_cdr)root["AIWebRTCEvent"]["value"]["event"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AIWebRTCRequest"))
        {
            AIWebRTCRequest topic;

            topic.command = (AIWebRTCCommand_cdr)root["AIWebRTCRequest"]["value"]["command"]["value"].asUInt();

            std::string destination = root["AIWebRTCRequest"]["value"]["destination"]["value"].asString();
            memset(topic.destination, 0, sizeof(topic.destination));
            memcpy(topic.destination, destination.c_str(), destination.size());

            topic.timeout_sec = root["AIWebRTCRequest"]["value"]["timeout_sec"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("AIWebRTCResponse"))
        {
            AIWebRTCResponse topic;

            topic.command = (AIWebRTCCommand_cdr)root["AIWebRTCResponse"]["value"]["command"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["AIWebRTCResponse"]["value"]["code"]["value"].asUInt();

            std::string destination = root["AIWebRTCResponse"]["value"]["destination"]["value"].asString();
            memset(topic.destination, 0, sizeof(topic.destination));
            memcpy(topic.destination, destination.c_str(), destination.size());

            topic.timeout_sec = root["AIWebRTCResponse"]["value"]["timeout_sec"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("BuzzerEvent"))
        {
            BuzzerEvent topic;

            topic.stamp.sec = root["BuzzerEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["BuzzerEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.event = (BuzzerEventType_cdr)root["BuzzerEvent"]["value"]["event"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("BuzzerRequest"))
        {
            BuzzerRequest topic;

            topic.command = (BuzzerCommandType_cdr)root["BuzzerRequest"]["value"]["command"]["value"].asUInt();

            topic.buzzer_type = root["BuzzerRequest"]["value"]["buzzer_type"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("BuzzerResponse"))
        {
            BuzzerResponse topic;

            topic.command = (BuzzerCommandType_cdr)root["BuzzerResponse"]["value"]["command"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["BuzzerResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("CommonResponse"))
        {
            CommonResponse topic;

            topic.stamp.sec = root["CommonResponse"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["CommonResponse"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["CommonResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("FingerPrintEvent"))
        {
            FingerPrintEvent topic;

            topic.stamp.sec = root["FingerPrintEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["FingerPrintEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.event = (FingerPrintEventType_cdr)root["FingerPrintEvent"]["value"]["event"]["value"].asUInt();

            std::string user_id = root["FingerPrintEvent"]["value"]["user_id"]["value"].asString();
            memset(topic.user_id, 0, sizeof(topic.user_id));
            memcpy(topic.user_id, user_id.c_str(), user_id.size());

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("FingerPrintRequest"))
        {
            FingerPrintRequest topic;

            topic.stamp.sec = root["FingerPrintRequest"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["FingerPrintRequest"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.command = (FingerPrintCommandType_cdr)root["FingerPrintRequest"]["value"]["command"]["value"].asUInt();

            std::string user_id = root["FingerPrintRequest"]["value"]["user_id"]["value"].asString();
            memset(topic.user_id, 0, sizeof(topic.user_id));
            memcpy(topic.user_id, user_id.c_str(), user_id.size());

            topic.timeout_sec = root["FingerPrintRequest"]["value"]["timeout_sec"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("FingerPrintResponse"))
        {
            FingerPrintResponse topic;

            topic.command = (FingerPrintCommandType_cdr)root["FingerPrintResponse"]["value"]["command"]["value"].asUInt();

            topic.user_count = root["FingerPrintResponse"]["value"]["user_count"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["FingerPrintResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("ZigbangLog"))
        {
            Log topic;

            topic.level = (LogLevel_cdr)root["ZigbangLog"]["value"]["level"]["value"].asUInt();

            topic.stamp.sec = root["ZigbangLog"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["ZigbangLog"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            std::string member_topic = root["ZigbangLog"]["value"]["topic"]["value"].asString();
            memset(topic.topic, 0, sizeof(topic.topic));
            memcpy(topic.topic, member_topic.c_str(), member_topic.size());

            std::string value = root["ZigbangLog"]["value"]["value"]["value"].asString();
            memset(topic.value, 0, sizeof(topic.value));
            memcpy(topic.value, value.c_str(), value.size());

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("MorticeEvent"))
        {
            MorticeEvent topic;

            topic.stamp.sec = root["MorticeEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["MorticeEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.event = (MorticeEventType_cdr)root["MorticeEvent"]["value"]["event"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("MorticeRequest"))
        {
            MorticeRequest topic;

            topic.command = (MorticeCommandType_cdr)root["MorticeRequest"]["value"]["command"]["value"].asUInt();

            topic.timeout_ms = root["MorticeRequest"]["value"]["timeout_ms"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("MorticeResponse"))
        {
            MorticeResponse topic;

            topic.command = (MorticeCommandType_cdr)root["MorticeResponse"]["value"]["command"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["MorticeResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("QRReadEvent"))
        {
            QRReadEvent topic;

            topic.stamp.sec = root["QRReadEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["QRReadEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.event = (QREventType_cdr)root["QRReadEvent"]["value"]["event"]["value"].asUInt();

            std::string read_string = root["QRReadEvent"]["value"]["read_string"]["value"].asString();
            memset(topic.read_string, 0, sizeof(topic.read_string));
            memcpy(topic.read_string, read_string.c_str(), read_string.size());

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("QRReadRequest"))
        {
            QRReadRequest topic;

            topic.command = (QRCommand_cdr)root["QRReadRequest"]["value"]["command"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("QRReadResponse"))
        {
            QRReadResponse topic;

            topic.command = (QRCommand_cdr)root["QRReadResponse"]["value"]["command"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["QRReadResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("RFIDReadEvent"))
        {
            RFIDReadEvent topic;

            topic.stamp.sec = root["RFIDReadEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["RFIDReadEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.mode = (RFIDModeType_cdr)root["RFIDReadEvent"]["value"]["mode"]["value"].asUInt();

            topic.event = (RFIDReadEventType_cdr)root["RFIDReadEvent"]["value"]["event"]["value"].asUInt();

            std::string user_id = root["RFIDReadEvent"]["value"]["user_id"]["value"].asString();
            memset(topic.user_id, 0, sizeof(topic.user_id));
            memcpy(topic.user_id, user_id.c_str(), user_id.size());

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("RFIDRequest"))
        {
            RFIDRequest topic;

            topic.command = (RFIDReadCommandType_cdr)root["RFIDRequest"]["value"]["command"]["value"].asUInt();

            std::string security_key = root["RFIDRequest"]["value"]["security_key"]["value"].asString();
            memset(topic.security_key, 0, sizeof(topic.security_key));
            memcpy(topic.security_key, security_key.c_str(), security_key.size());

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("RFIDResponse"))
        {
            RFIDResponse topic;

            topic.command = (RFIDReadCommandType_cdr)root["RFIDResponse"]["value"]["command"]["value"].asUInt();

            topic.user_count = root["RFIDResponse"]["value"]["user_count"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["RFIDResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("SensorEvent"))
        {
            SensorEvent topic;

            topic.stamp.sec = root["SensorEvent"]["value"]["stamp"]["value"]["sec"]["value"].asUInt();
            topic.stamp.nanosec = root["SensorEvent"]["value"]["stamp"]["value"]["nanosec"]["value"].asUInt();

            topic.type = (SensorType_cdr)root["SensorEvent"]["value"]["type"]["value"].asUInt();

            topic.timeout_sec = root["SensorEvent"]["value"]["timeout_sec"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("SensorRequest"))
        {
            SensorRequest topic;

            topic.command = (SendorCommandType_cdr)root["SensorRequest"]["value"]["command"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("SensorResponse"))
        {
            SensorResponse topic;

            topic.command = (SendorCommandType_cdr)root["SensorResponse"]["value"]["command"]["value"].asUInt();

            topic.code = (ErrorCode_cdr)root["SensorResponse"]["value"]["code"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }
        else if (root.isMember("TimeStamp"))
        {
            TimeStamp topic;

            topic.sec = root["TimeStamp"]["value"]["sec"]["value"].asUInt();

            topic.nanosec = root["TimeStamp"]["value"]["nanosec"]["value"].asUInt();

            uxrPubOnly.PubTopic(topic);
        }

        else
        {
            std::cout << "Received unknown topic" << std::endl;
            // print out root
            std::cout << root << std::endl;
        }
    }
}
