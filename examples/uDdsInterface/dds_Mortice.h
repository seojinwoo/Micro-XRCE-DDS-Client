// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dds_Mortice.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _dds_Mortice_H_
#define _dds_Mortice_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
#include "dds_TimeStamp.h"
#include "dds_ErrorCode.h"

typedef enum MorticeEventType
{
    MORTICE_EVENT_OPEN,
    MORTICE_EVENT_OPENED,
    MORTICE_EVENT_CLOSE,
    MORTICE_EVENT_CLOSED
} MorticeEventType;

typedef uint32_t MorticeEventType_cdr;
typedef enum MorticeCommandType
{
    MORTICE_CMD_OEPN,
    MORTICE_CMD_CLOSE
} MorticeCommandType;

typedef uint32_t MorticeCommandType_cdr;
/*!
 * @brief This struct represents the structure MorticeEvent defined by the user in the IDL file.
 * @ingroup dds_Mortice
 */
typedef struct MorticeEvent
{
    TimeStamp stamp;
    MorticeEventType_cdr event;
} MorticeEvent;

struct ucdrBuffer;

bool MorticeEvent_serialize_topic(struct ucdrBuffer* writer, const MorticeEvent* topic);
bool MorticeEvent_deserialize_topic(struct ucdrBuffer* reader, MorticeEvent* topic);
uint32_t MorticeEvent_size_of_topic(const MorticeEvent* topic, uint32_t size);

/*!
 * @brief This struct represents the structure MorticeRequest defined by the user in the IDL file.
 * @ingroup dds_Mortice
 */
typedef struct MorticeRequest
{
    MorticeCommandType_cdr command;
    uint16_t timeout_ms;
} MorticeRequest;

struct ucdrBuffer;

bool MorticeRequest_serialize_topic(struct ucdrBuffer* writer, const MorticeRequest* topic);
bool MorticeRequest_deserialize_topic(struct ucdrBuffer* reader, MorticeRequest* topic);
uint32_t MorticeRequest_size_of_topic(const MorticeRequest* topic, uint32_t size);

/*!
 * @brief This struct represents the structure MorticeResponse defined by the user in the IDL file.
 * @ingroup dds_Mortice
 */
typedef struct MorticeResponse
{
    MorticeCommandType_cdr command;
    ErrorCode_cdr code;
} MorticeResponse;

struct ucdrBuffer;

bool MorticeResponse_serialize_topic(struct ucdrBuffer* writer, const MorticeResponse* topic);
bool MorticeResponse_deserialize_topic(struct ucdrBuffer* reader, MorticeResponse* topic);
uint32_t MorticeResponse_size_of_topic(const MorticeResponse* topic, uint32_t size);


#ifdef __cplusplus
}
#endif

#endif // _dds_Mortice_H_